set nocompatible
syntax on
filetype plugin indent on
set autoindent

"line numbers, toggle line numbers with <F2> for easy copy/pasta
set number

"Backspace in insert mode, able to delete line breaks, indents, insert-position
set backspace=indent,eol,start


" Spacing/Tabs {{{
"==============================================================================
" Tab key is explcitly set to only use 4 white spaces
" Indent a selection of text will use 4 spaces

"only insert 4 spaces for tabs
set tabstop=4

"this will make the vim indent cmd '>>' or '<<' use 4 spaces only
set shiftwidth=4

"insert space characters anytime tab is pressed
set expandtab

"}}}


" Whitespacing {{{
"==============================================================================
" Highlight all trailing white space,
" Except for unite windows and readonly
" files

" Display unprintable chars
set list
set listchars=tab:▸\ ,extends:❯,precedes:❮,nbsp:␣
set showbreak=↪



" Dictate the color of the whitespace highlighting:
" [only one of the following two should be uncommented]
highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
"highlight ExtraWhitespace ctermbg=red guibg=red


" Autocmds to set whitespace matching rules
" match essentially just finds whitespace with highlightsearch
match ExtraWhitespace /\s\+$/
augroup MyAutoCmd
  autocmd BufWinEnter * if &modifiable && &ft!='unite' | match ExtraWhitespace /\s\+$/ | endif
  autocmd InsertEnter * if &modifiable && &ft!='unite' | match ExtraWhitespace /\s\+\%#\@<!$/ | endif
  autocmd InsertLeave * if &modifiable && &ft!='unite' | match ExtraWhitespace /\s\+$/ | endif
  autocmd BufWinLeave * if &modifiable && &ft!='unite' | call clearmatches() | endif
augroup END

"}}}




" Utility {{{
"==============================================================================
" Toggle line numbers and fold column for easy copying:
nnoremap <F2> :set nonumber!<CR>:set foldcolumn=0<CR>


"check for bad mappings with the following command
":verbose imap <BS> wll show insert-mode mapping for backspace key
":verbose imap <TAB> will show insert-mode mapping for tab key

"}}}



" set lazyredraw
" set fcs=vert:│
" set mouse=a
" set number
" set t_Co=256
" set background=dark
" set history=10000
" set list
" set listchars=tab:▸\ ,extends:❯,precedes:❮,nbsp:␣
" set showbreak=↪
" set scrolloff=10
" set numberwidth=1
" set completeopt=longest,menuone
" set wildmode=list:longest,full
" set hidden
" set backspace=eol,start,indent
" set ignorecase
" set smartcase
" set incsearch
" set magic
" set noshowmatch
" set vb
" set t_vb=
" set laststatus=2
" set encoding=utf-8
" set timeout timeoutlen=1000 ttimeoutlen=0
" set nobackup
" set nowritebackup
" set noswapfile
" set expandtab
" set shiftwidth=2
" set tabstop=8
" set softtabstop=2
" set smarttab
" set linebreak
" set textwidth=80
" set autoindent
" set nowrap
" set whichwrap+=h,l,<,>,[,]
" set virtualedit=onemore
" set virtualedit=all
" if has ('unnamedplus')
  " set clipboard=unnamedplus
" else
  " set clipboard=unnamed
" endif
" set updatetime=1000
" set iskeyword+=<,>,[,],:,-,`,!
" if exists('$TMUX')
  " let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  " let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
" else
  " let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  " let &t_EI = "\<Esc>]50;CursorShape=0\x7"
" endif
" let g:multi_cursor_debug_latency=1
" source ~/code/vim/vim-multiple-cursors/plugin/multiple_cursors.vim
" source ~/code/vim/vim-multiple-cursors/autoload/multiple_cursors.vim
